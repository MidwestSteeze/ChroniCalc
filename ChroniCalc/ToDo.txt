 ToDo
 
 REPORTED BUGS NOT YET CATEGORIZED:
	- Mastery Tree 65lvlreq in Row3-5 can bypass that if you put 65 in Class Mastery 1 and 2 and don't have 65 in 3; you can still pick the Ultimate
	- SaveAs doesn't update Build Name based on filename chosen, it also then doesn't overwrite the Build in the Builds List beacuse it saved over the original build name but with a diff file name
 

 RESUME AT:
	- how to handle build converts to new releases? (add ApplicationVersion into the Build xml)
		- DECISION: force an auto-update of a Build when it's opened by calling BuildConvert.ConvertBuild() on Open; requires changing OpenBuild() logic to read the Skill.Level and then find and set the actual values from the Skill Data
		- TRIGGERS of a build convert:
			- NOTE: I am reading the entire skill's data from the saved Build; so, value differences in like a Skill.Damage property in a new version are NOT realized when an old build is loaded
				- THEREFORE, you have to make a decision of what's more important: letting them keep "old" versions of builds or always updating them
					- if you let them keep old versions, you need to write converts for skill data changes
					- if you don't let them keep old versions, you need to change the OpenBuild logic to read the Skill.Level and then find and set the actaul values (ie. Damage, Cooldown, etc) from the Skill Data Export
			- skilldata export changing (realized by manually diffing skilldata between version of Chronicon)
				- Skill Removed/Added/Name Changed
				- Skill Data Change (ie. Damage, Duration, Element, etc): you'll need to diff Skill Data and convert any property values that were changed (this is fairly maintenance heavy)
				- Skill Property Add: the build will deserialize and you can write your convert to set a value for the new property
				- Skill Property Remove:  the build will serialize and the property won't be loaded with the value in the saved build file
			- me changing the structure or datatype of a build/class/tree/skill (realized by being cognizant of my code changes)
				- this cannot be handled via c# convert, it would have to be external to the Build object (ie. XSLT) so it can be changed before attempting to serialize into a Build
		- SOLUTIONS:
			- OPTION 1: XSLT-based or JSON equivalent of XSLT if i change the build data storage back to JSON
			- OPTION 2: Directly in code, writing a new method for each new version of ChroniCalc/Chronicon that requires a convert (store trigger versions in a list to iterate through them in order)
	- Mastery Trees:
		- de-leveling a skill may invalidate postreq skills (this may be a bug in class-specific skill trees as well) (ie. can't have a skill level 0 if a later-linked skill is still leveled; and you can't de-level a skill that causes later-linked skills to no longer meet the min_level req)
		- in the 3 Generic rows, the same skill at the same x position can be selected in a different column (ie. Health in all 3 of the Generic rows' first column)	
	- implement export to Chronicon .build file which is a Skill ID/Level pair in JSON format (see discord for sample file)
		- Class ID required: Templar=1, Berserker=2, Warden=3, Warlock=4	

 MAJORS:
  - Save/Open/Load/Share Builds: Swap logic back to JSON format (may need squarebit to correct the json since it's printing non-UTF8 chars)
      - could also retain use of XML within program but output as JSON (ie. JsonConvert.SerializeXmlNodeDoc())
	  - see project JsonImporter, has it working but requires adjustment to JSON
  - Stat calculation and screen (damage, health, etc)
     - Phase 1: just the totals (modifiers, mulitpliers, conversions, etc)
	 - Phase 2: actual damage numbers and dps

 
 CLASSES:


 INVENTORY:

 
 SKILLS:
	

 STATS: 

 
 TREES:


 POST BETA MISC:
	- Pastebin: create more accounts to acquire more API keys since youll probably hit the 25 posts per 24h limit once this gets in the hands of more people. math.rand on the array of keys to pull a random, or oldest, key and use it
		- and another, separate, subset of keys for Error Reporting
	- can't change the last node (element vs buffs vs ultimate cd) on the 2nd, 3rd, and 4th mastery line of each class; they're locked into the elements shown off the bat.
    - cleanup tree background images in relation to how the controls sit on top of them with some parts still showing and the last column being stretched (especially Mastery tree stretching)
	- SaveBuild: rework so it's not an actual SaveFileDialog but instead just a simple prompt for name of the build (ie. create your own CustomFileDialog control) and allows user to move/re-order them as well or at least click column header to order by BuildName and Stat
	- (It's eating up paste counts, make its own account? IN STASH RDY FOR TESTING) change EChroniCalc exception handling to paste the callstack and error to pastebin and provide a link to the user to send to the admin
	  - tests to complete:
		- Build Share:
		   - *online no prior exception
		   - online with prior exception
		   - offline no prior exception
		   - offline with prior exception
		- Build Load:
		   - online no prior exception
		   - online with prior exception
		   - offline no prior exception
		   - offline with prior exception
	- no Comic Sans please, different font? has a bad rep, other fonts (verdana, helvetica or arial) potentially handle display better		

 POST RELEASE MISC:
