 ToDo

 RESUME AT:
    - issue with install/run location of program in relation to where Build files are saved/reloaded. utilize user folder instead? (PoB uses a stand-alone feature with a Builds folder, where the PoB.exe is run from the same root folder; but how does the .exe installer work then?)
	- how to handle build converts to new releases?
	  - manually diff skilldata between old&new version, write xslt to convert builds for known differences (unless can find xslt equivalent for json)
    - test installer on a different machine
	- Get an initial release available on Git for download/install

 MAJORS:
  - Integrate the Mastery Tree (need data from sqrbit)
  - Save/Open/Load/Share Builds: Swap logic back to JSON format (may need squarebit to correct the json since it's printing non-UTF8 chars)
      - could also retain use of XML within program but output as JSON (ie. JsonConvert.SerializeXmlNodeDoc())
	  - see project JsonImporter, has it working but requires adjustment to JSON
  - Stat calculation and screen (damage, health, etc)
     - Phase 1: just the totals (modifiers, mulitpliers, conversions, etc)
	 - PHase 2: actual damage numbers and dps
 
 CLASSES:


 INVENTORY:

 
 SKILLS:
	

 STATS: 

 
 TREES:


 MISC:
	- MainForm: Mastery Point counter (no Maximum)
	- SaveBuild: rework so it's not an actual SaveFileDialog but instead just a simple prompt for name of the build (ie. create your own CustomFileDialog control) and allows user to move/re-order them as well or at least click column header to order by BuildName and Stat